#ifndef REDUCTION_ADD_H_
#define REDUCTION_ADD_H_

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported		*|
 \*-------------------------------------*/

#include "Indice1D.h"

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

template <typename T>
__device__ void reduction(T* tabBlock, T* ptrDevResultat);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

template <typename T>
static __device__ void reductionIntraBlock(T* tabBlock);

template <typename T>
static __device__ void reductionInterblock(T* tabBlock, T* ptrDevResultat);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

template <typename T>
__device__ void reductionADD(T* tabBlock, T* ptrDevResultat)
    {
    reductionIntraBlock(tabBlock);

    __syncthreads();

    reductionInterblock(tabBlock, ptrDevResultat);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * Hyp :
 * 	(H1) 	length(tabBlock) est une puissance de 2 ! ie blockDim.x est une puissance de 2
 * 	(H2) 	gride et Block de dim 1
 * 	(H3) 	T est un type simple suppoter par atomicAdd
 *
 */
template <typename T>
__device__ void reductionIntraBlock(T* tabBlock)
    {
    int midle = blockDim.x / 2;
    int tidLocal = threadIdx.x;

    // int tidLocal =   Indice1D::tidLocal()

    while (midle >= 1)
	{

	if (tidLocal < midle)
	    {
	    tabBlock[tidLocal] += tabBlock[tidLocal + midle];
	    }

	__syncthreads();

	midle /= 2;
	}
    }

/**
 *  Hyp : ptrDevResultat iniotaiuliasé avec 0 !!
 */
template <typename T>
__device__ void reductionInterblock(T* tabBlock, T* ptrDevResultat)
    {
    if (threadIdx.x == 0)
	{
	atomicAdd(ptrDevResultat, tabBlock[0]); // autant d'acces que de block
	}
    }

#endif 

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
