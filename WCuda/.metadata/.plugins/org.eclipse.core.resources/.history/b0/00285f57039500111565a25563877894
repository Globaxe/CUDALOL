#include "Indice2D.h"
#include "cudaTools.h"
#include "Device.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void modifyImage(uchar4* ptrDev0_Image, int w, int h,cudaStream_t stream=0);// 0 stream par default

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __global__ void toGray(uchar4* ptrDev1_image, int w, int h);
static __device__ void modifyColor(int pixelI, int pixelJ, uchar4& color);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void modifyImage(uchar4* ptrDev0_Image, int w, int h,cudaStream_t stream)
    {
    dim3 blockPerGrid = dim3(8, 8, 1);
    dim3 threadPerBlock = dim3(16, 16, 1);

   // print(blockPerGrid, threadPerBlock);
    //Device::assertDim(blockPerGrid, threadPerBlock);

    toGray    <<<blockPerGrid,threadPerBlock,0,stream>>>(ptrDev0_Image, w, h); // paramètre 3 : spécifier le nombre d'octets en mémoire partagée alloués dynamiquement par bloc en plus de la mémoire allouée statiquement; 0 valeur par defaut
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__global__ void toGray(uchar4* ptrDev1_image, int w, int h)
    {
    int tid = Indice2D::tid();
    int nbThread = Indice2D::nbThread();

    uchar4 color;
    color.w = 255; // alpha

    int pixelI;
    int pixelJ;

    while(tid < w * h)
	{
	Indice2D::pixelIJ(tid, w, pixelI, pixelJ);

	color=ptrDev1_image[tid];
	modifyColor(pixelI, pixelJ, color);
	ptrDev1_image[tid] = color;

	tid += nbThread;
	}
    }

__device__ void modifyColor(int pixelI, int pixelJ, uchar4& color)
    {
    unsigned char levelGray = (color.x + color.y + color.z) / 3;

    color.x = levelGray;
    color.y = levelGray;
    color.z = levelGray;
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

