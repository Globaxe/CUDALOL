#include "WorkGPU.h"
#include "cudaTools.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

WorkGPU::WorkGPU(uchar4* ptrImage, int w, int h)
    {
    this->ptrImage = ptrImage;
    this->w = w;
    this->h = h;
    }

WorkGPU::~WorkGPU(void)
    {
    //rien
    }

void WorkGPU::run(void)
    {
    copyImageOnDevice0();
    modifyImageOnDevice0();
    copyImageFromDevice0();
    }

int WorkGPU::sizeOctets(void)
    {
    return w * h * sizeof(uchar4);
    }

void WorkGPU::copyImageOnDevice0(void)
    {
    cout << "copyImageOnDevice0" << endl;

    HANDLE_ERROR(cudaMemcpy(ptrDev0_Image, ptrImage, sizeOctets(), cudaMemcpyHostToDevice));
    }

void WorkGPU::modifyImageOnDevice0(void)
    {
    dim3 blockPerGrid = dim3(8, 8, 1);
    dim3 threadPerBlock = dim3(16, 16, 1);

    print(blockPerGrid, threadPerBlock);
    Device::assertDim(blockPerGrid, threadPerBlock);

modifyImage    <<<blockPerGrid,threadPerBlock>>>(ptrDev0_Image, w, h);
    }

void WorkGPU::copyImageFromDevice0(void)
    {
    cout << "copyImageFromDevice1" << endl;

    HANDLE_ERROR(cudaMemcpy(ptrImage, ptrDev0_image, sizeOctets, cudaMemcpyDeviceToHost));
    }

__global__ void modifyImage(uchar4* ptrDev1_image, int w, int h)
    {
    int tid = Indice2D::tid();
    int nbThread = Indice2D::nbThread();

    uchar4 color;
    color.w = 255; // alpha

    int pixelI;
    int pixelJ;

    while (tid < w * h)
	{
	Indice2D::pixelIJ(tid, w, pixelI, pixelJ);

	modifyColor(pixelI, pixelJ, color);
	ptrDev1_image[tid] = color;

	tid += nbThread;
	}
    }

__device__ void modifyColor(int pixelI, int pixelJ, uchar4& color)
    {
    uchar levelGray = color.x + color.y + color.z / 3;

    color.x = levelGray;
    color.y = levelGray;
    color.z = levelGray;
    }


/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

