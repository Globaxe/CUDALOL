#include <iostream>
#include "Pipeline.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Constructeur		*|
 \*-------------------------------------*/

Pipeline::Pipeline(FactoryImageProvider_I& factoryImageProvider, FactoryRowFinder_I& factoryRowFinder, FactoryRowConsomateur_I& factoryRowConsomateur,
	FactoryWeedsFinder_I& factoryWeedsFinder, FactoryWeedsConsomateur_I& factoryWeedsConsomateur)
    {
    this->ptrImageProvider = factoryImageProvider.create();

    this->ptrRowFinder = factoryRowFinder.create();
    this->ptrRowConsomateur = factoryRowConsomateur.create();

    this->ptrWeedsFinder = factoryWeedsFinder.create();
    this->ptrWeedsConsomateur = factoryWeedsConsomateur.create();
    }

Pipeline::~Pipeline(void)
    {
    delete ptrImageProvider;

    delete ptrRowFinder;
    delete ptrRowConsomateur;

    delete ptrWeedsFinder;
    delete ptrWeedsConsomateur;
    }

/*--------------------------------------*\
 |*		Override		*|
 \*-------------------------------------*/

void Pipeline::run()
    {
    int i = 1;
    while (true)
	{
	cout << "Processing image " << i << endl;

	Mat matImageSrc = ptrImageProvider->provide();

	RowIn* ptrRowIn = new RowIn(matImageSrc);
	RowOut* ptrRowOut = ptrRowFinder->process(ptrRowIn);

	#pragma omp sections
	    {
	    #pragma omp section
		{
		ptrRowConsomateur->process(ptrRowOut);
		}

	    #pragma omp section
		{
		WeedsIn* ptrWeedsIn = new WeedsIn(matImageSrc);
		WeedsOut* ptrWeedsOut = ptrWeedsFinder->process(ptrWeedsIn);

		ptrWeedsConsomateur->process(ptrWeedsIn, ptrWeedsOut);

		delete ptrWeedsIn;
		delete ptrWeedsOut;
		}
	}

	i++;
	}
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
